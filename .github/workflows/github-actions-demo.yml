name: Build Frontend & Backend
run-name: Build triggered by ${{ github.actor }}

# on: [pull_request]
# on:
#   push: 
#     paths: 
#       - 'frontend/**'
#       - 'backend/**' 

on:
  pull_request:
    types: [closed]
    branches: [master]

jobs:
  # changes:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     frontend: ${{ steps.filter.outputs.frontend }}
  #     backend: ${{ steps.filter.outputs.backend }}
  #   steps:
  #     - uses: actions/checkout@v5
  #     - uses: dorny/paths-filter@v2
  #       id: filter
  #       with:
  #         filters: |
  #           frontend: 'frontend/**'
  #           backend: 'backend/**'
  changes-detector:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

  build-frontend:
    needs: [changes-detector]
    if: needs.changes-detector.outputs.frontend == 'true'
    name: Build Frontend
    runs-on: ubuntu-latest
    # needs: changes
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm' # ускоряет npm install
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci # быстрее и надёжнее, чем npm install
      - run: npm run build

      - uses: actions/upload-artifact@v4
        id: upload
        with:
          name: frontend-dist 
          path: frontend/dist 
          
      - name: Notify Telegram (Frontend)
        if: always()
        run: |
          echo '${{ toJSON(github) }}'
          STATUS=${{ job.status }}
          MESSAGE="📦 *Frontend build* finished with status: *${STATUS}*\nRepo: ${{ github.repository }}\nCommit: ${{ github.sha }}\nBy: ${{ steps }}"
           curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=Markdown \
            -d text="$MESSAGE ${{ steps.upload.outputs.artifact-url }}"
  
  sonar-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: SonarQube Scan (Frontend)
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.projectBaseDir=frontend
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

  build-backend:
    needs: changes-detector
    if: needs.changes-detector.outputs.backend == 'true'
    name: Build Backend
    runs-on: ubuntu-latest
    # needs: changes
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: maven #  кеширует зависимости Maven

      - run: mvn -B clean package # -B = batch mode, меньше логов

      - uses: actions/upload-artifact@v4
        id: upload
        with:
         name: backend-jar
         path: backend/target
      
      - name: Notify Telegram (Backend)
        if: always()
        run: |
          STATUS=${{ job.status }}
          MESSAGE="📦 *Backend build* finished with status: *${STATUS}*\nRepo: ${{ github.repository }}\nCommit: ${{ github.sha }}\nBy: ${{ steps }}"
           curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=Markdown \
            -d text="$MESSAGE ${{ steps.upload.outputs.artifact-url }}"
     
  sonar-backend:
    needs: build-backend
    name: SonarQube Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v4
        with:
         java-version: 17
         distribution: temurin
         cache: maven
        
      # - name: Compile classes for SonarQube
      #   run: mvn -B compile -DskipTests
      - uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/target

      - name: SonarQube Scan (Backend)
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACK }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.projectBaseDir=backend
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

