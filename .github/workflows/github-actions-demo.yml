name: Build Frontend & Backend
run-name: Build triggered by ${{ github.actor }}

on: [pull_request]
# on:
#   push:
#     paths:
#       - 'frontend/**'
#       - 'backend/**'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend: 'frontend/**'
            backend: 'backend/**'

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: changes
    # if: needs.changes.outputs.frontend == 'true'
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm' # —É—Å–∫–æ—Ä—è–µ—Ç npm install
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci # –±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–∞–¥—ë–∂–Ω–µ–µ, —á–µ–º npm install
      - run: npm run build

      - uses: actions/upload-artifact@v4
        id: upload
        with:
          name: frontend-dist 
          path: frontend/dist 
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         
      - name: Notify Telegram (Frontend)
        if: always() # –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ —Å–±–æ—Ä–∫–∞ —É–ø–∞–ª–∞
        run: |
          echo '${{ toJSON(github) }}'
          STATUS=${{ job.status }}
          MESSAGE="üì¶ *Frontend build* finished with status: *${STATUS}*\nRepo: ${{ github.repository }}\nCommit: ${{ github.sha }}\nBy: ${{ steps }}"
           curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=Markdown \
            -d text="$MESSAGE ${{ steps.upload.outputs.artifact-url }}"
  
  # sonarqube:
  #   name: SonarQube
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #     - name: SonarQube Scan
  #       uses: SonarSource/sonarqube-scan-action@v6
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: changes
    # if: needs.changes.outputs.backend == 'true'
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: maven #  –∫–µ—à–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Maven

      - run: mvn -B clean package # -B = batch mode, –º–µ–Ω—å—à–µ –ª–æ–≥–æ–≤

      - uses: actions/upload-artifact@v4
        id: upload
        with:
         name: backend-jar
         path: backend/target/*.jar
      
      - name: Notify Telegram (Backend)
        if: always() # –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ —Å–±–æ—Ä–∫–∞ —É–ø–∞–ª–∞
        run: |
          STATUS=${{ job.status }}
          MESSAGE="üì¶ *Backend build* finished with status: *${STATUS}*\nRepo: ${{ github.repository }}\nCommit: ${{ github.sha }}\nBy: ${{ steps }}"
           curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=Markdown \
            -d text="$MESSAGE ${{ steps.upload.outputs.artifact-url }}"
     
  # sonarcloud:
  #   name: SonarCloud Scan
  #   runs-on: ubuntu-latest
  #   needs: build-backend  # –∂–¥—ë—Ç –ø–æ–∫–∞ —Å–æ–±–µ—Ä—ë—Ç—Å—è backend
  #   steps:
  #     - uses: actions/checkout@v5

  #     - name: Set up Java
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: 17
  #         distribution: temurin

  #     - name: Build backend for Sonar
  #       run: |
  #         cd backend
  #         mvn -B clean package -DskipTests

  #     - name: Run SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@v2
  #       with:
  #         args: >
  #           -Dsonar.projectKey=Aquid89_sausage
  #           -Dsonar.organization=aquid89
  #           -Dsonar.java.binaries=backend/target/classes
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  # codeql-analysis:
  #   name: CodeQL Security Scan 
  #   runs-on: ubuntu-latest
  #   permissions:
  #     security-events: write
  #     actions: read
  #     contents: read
  #   # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ—Ä–æ–Ω—Ç–∞ –∏ –±—ç–∫–∞ 
  #   needs: [changes]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v5

  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: javascript, java # –µ—Å–ª–∏ —É —Ç–µ–±—è JS –∏ Java
     
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 16
  #         cache: 'npm' # —É—Å–∫–æ—Ä—è–µ—Ç npm install 
  #         cache-dependency-path: frontend/package-lock.json

  #     - name: Build frontend
  #       run: |
  #         cd frontend
  #         npm ci
  #         npm run build

  #     - name: Build backend
  #       run: |
  #         cd backend
  #         mvn -B compile

      
      # - name: Perform CodeQL Analysis
      #   uses: github/codeql-action/analyze@v3
