name: Build Frontend & Backend
run-name: Build triggered by ${{ github.actor }}

on: [push]
# on:
#   push:
#     paths:
#       - 'frontend/**'
#       - 'backend/**'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend: 'frontend/**'
            backend: 'backend/**'

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: changes
    # if: needs.changes.outputs.frontend == 'true'
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm' # —É—Å–∫–æ—Ä—è–µ—Ç npm install
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci # –±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–∞–¥—ë–∂–Ω–µ–µ, —á–µ–º npm install
      - run: npm run build

      - uses: actions/upload-artifact@v4
        id: upload
        with:
          name: frontend-dist 
          path: frontend/dist 
         
      - name: Notify Telegram (Frontend)
        if: always() # –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ —Å–±–æ—Ä–∫–∞ —É–ø–∞–ª–∞
        run: |
          echo '${{ toJSON(github) }}'
          STATUS=${{ job.status }}
          MESSAGE="üì¶ *Frontend build* finished with status: *${STATUS}*\nRepo: ${{ github.repository }}\nCommit: ${{ github.sha }}\nBy: ${{ steps }}"
           curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=Markdown \
            -d text="$MESSAGE ${{ steps.upload.outputs.artifact-url }}"

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: changes
    # if: needs.changes.outputs.backend == 'true'
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: maven #  –∫–µ—à–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Maven

      - run: mvn -B clean package # -B = batch mode, –º–µ–Ω—å—à–µ –ª–æ–≥–æ–≤

      - uses: actions/upload-artifact@v4
        id: upload
        with:
         name: backend-jar
         path: backend/target/*.jar
      
      - name: Notify Telegram (Backend)
        if: always() # –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ —Å–±–æ—Ä–∫–∞ —É–ø–∞–ª–∞
        run: |
          STATUS=${{ job.status }}
          MESSAGE="üì¶ *Backend build* finished with status: *${STATUS}*\nRepo: ${{ github.repository }}\nCommit: ${{ github.sha }}\nBy: ${{ steps }}"
           curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=Markdown \
            -d text="$MESSAGE ${{ steps.upload.outputs.artifact-url }}"
  
  codeql-security-scan:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    needs: [build-frontend, build-backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, java
          queries: security-extended
          build-mode: manual

      - name: Build Java manually
        run: |
          cd backend
          mvn -B clean compile

      - name: Download Frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
  # codeql-analysis:
  #   name: CodeQL Security Scan 
  #   runs-on: ubuntu-latest
  #   permissions:
  #     security-events: write
  #     actions: read
  #     contents: read
  #   # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ—Ä–æ–Ω—Ç–∞ –∏ –±—ç–∫–∞
  #   needs: [changes]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v5

  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: javascript, java # –µ—Å–ª–∏ —É —Ç–µ–±—è JS –∏ Java

  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v3

  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v3
