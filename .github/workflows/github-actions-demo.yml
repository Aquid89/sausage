name: Build Frontend & Backend
run-name: Build triggered by ${{ github.actor }}

# on: [pull_request]
# on:
#   push: 
#     paths: 
#       - 'frontend/**'
#       - 'backend/**' 

on:
  pull_request:
    # types: [closed]
    branches: [master]
jobs:
  # changes:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     frontend: ${{ steps.filter.outputs.frontend }}
  #     backend: ${{ steps.filter.outputs.backend }}
  #   steps:
  #     - uses: actions/checkout@v5
  #     - uses: dorny/paths-filter@v2
  #       id: filter
  #       with:
  #         filters: |
  #           frontend: 'frontend/**'
  #           backend: 'backend/**'
  changes-detector:
    runs-on: ubuntu-latest
    outputs:
     frontend: ${{ steps.changes.outputs.frontend == 'true' && 'true' || 'false' }}
     backend: ${{ steps.changes.outputs.backend == 'true' && 'true' || 'false' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          base: ${{ github.event.pull_request.base.sha }}
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
  build-frontend:
    needs: [changes-detector]
    if: needs.changes-detector.outputs.frontend == 'true'
    name: Build Frontend
    runs-on: ubuntu-latest
    # needs: changes
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm' # —É—Å–∫–æ—Ä—è–µ—Ç npm install
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci # –±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–∞–¥—ë–∂–Ω–µ–µ, —á–µ–º npm install
      - run: npm run build

      - uses: actions/upload-artifact@v4
        id: upload
        with:
          name: frontend-dist 
          path: frontend/dist 

      - name: Archive Frontend
        run: zip -r frontend-dist.zip dist

      - name: Upload to Nexus
        env:
         NEXUS_USER: ${{ secrets.NEXUS_USER }}
         NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
         curl -u $NEXUS_USER:$NEXUS_PASSWORD \
          --upload-file frontend-dist.zip \
          https://a2bd0a515c00.ngrok-free.app/repository/frontend/${{ github.sha }}/frontend-dist.zip      
      - name: Notify Telegram (Frontend)
        if: always()
        run: |
          echo '${{ toJSON(github) }}'
          STATUS=${{ job.status }}
          MESSAGE="üì¶ *Frontend build* finished with status: *${STATUS}*\nRepo: ${{ github.repository }}\nCommit: ${{ github.sha }}\nBy: ${{ steps }}"
           curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=Markdown \
            -d text="$MESSAGE ${{ steps.upload.outputs.artifact-url }}"
  
  deploy-frontend:
   runs-on: ubuntu-latest
   needs: [changes-detector, build-frontend]

   steps:
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H 51.250.90.178 >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
       ssh ${{ secrets.SSH_USER }}@51.250.90.178 "
       cd /var/www/myapp || (sudo mkdir -p /var/www/myapp && cd /var/www/myapp && sudo chown \$USER:\$USER .);
       rm -rf *;
       wget --user='${{ secrets.NEXUS_USER }}' --password='${{ secrets.NEXUS_PASSWORD }}' \
       'https://a2bd0a515c00.ngrok-free.app/repository/frontend/2677a9fb1f076c693e41de664d20edb1c837bb48/frontend-dist.zip' \
       -O build.zip;
       unzip build.zip;
         sudo systemctl reload nginx"

  
  sonar-frontend:
    needs: [changes-detector, build-frontend]
    if: needs.changes-detector.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: SonarQube Scan (Frontend)
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.projectBaseDir=frontend
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

  build-backend:
    needs: [changes-detector]
    if: needs.changes-detector.outputs.backend == 'true'
    name: Build Backend
    runs-on: ubuntu-latest
    # needs: changes
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: maven #  –∫–µ—à–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Maven

      - run: mvn -B clean package # -B = batch mode, –º–µ–Ω—å—à–µ –ª–æ–≥–æ–≤

      - uses: actions/upload-artifact@v4
        id: upload
        with:
         name: backend-jar
         path: backend/target
      
      # –°–æ–∑–¥–∞—ë–º settings.xml —Å –ª–æ–≥–∏–Ω–æ–º
      - name: Create Maven settings.xml
        run: |
          cat <<EOF > settings.xml
          <settings xmlns="http://maven.apache.org/SETTINGS/1.1.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd">
            <servers>
              <server>
            <id>sausage-store</id>
                <username>${{ secrets.NEXUS_USER }}</username>
                <password>${{ secrets.NEXUS_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF


      # –°–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π
      - name: Build and Deploy Backend
        run: |
         mvn deploy -B -DskipTests \
            -s settings.xml \
            -Dnexus.repo.url= https://a2bd0a515c00.ngrok-free.app/repository/backend-snapshots/ \
           -Dmaven.repo.local=${{ github.workspace }}/.m2/repository \

      - name: Notify Telegram (Backend)
        if: always()
        run: |
            STATUS=${{ job.status }}
            MESSAGE="üì¶ *Backend build* finished with status: *${STATUS}*\nRepo: ${{ github.repository }}\nCommit: ${{ github.sha }}\nBy: ${{ steps }}"
             curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
              -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
             -d parse_mode=Markdown \
              -d text="$MESSAGE ${{ steps.upload.outputs.artifact-url }}"
     
  sonar-backend:
    needs: [changes-detector, build-backend]
    name: SonarQube Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-java@v4
        with:
         java-version: 17
         distribution: temurin
         cache: maven
        
      # - name: Compile classes for SonarQube
      #   run: mvn -B compile -DskipTests
      - uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/target

      - name: SonarQube Scan (Backend)
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACK }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.projectBaseDir=backend
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

